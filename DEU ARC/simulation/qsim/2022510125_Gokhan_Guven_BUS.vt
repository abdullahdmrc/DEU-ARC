// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/23/2024 22:15:21"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    2022510125_Gokhan_Guven_BUS
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module 2022510125_Gokhan_Guven_BUS_vlg_sample_tst(
	clr_reg,
	input,
	mclk,
	rclk,
	sampler_tx
);
input [1:0] clr_reg;
input [3:0] input;
input  mclk;
input  rclk;
output sampler_tx;

reg sample;
time current_time;
always @(clr_reg or input or mclk or rclk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module 2022510125_Gokhan_Guven_BUS_vlg_check_tst (
	AR_OUT,
	Cout,
	DATA_M_OUT,
	INS_M_OUT,
	IR_OUT,
	OUTR_OUT,
	PC_OUT,
	R0_OUT,
	R1_OUT,
	R2_OUT,
	stackm_out,
	T0,
	T2,
	T3,
	T4,
	V_Cout,
	sampler_rx
);
input [3:0] AR_OUT;
input  Cout;
input [3:0] DATA_M_OUT;
input [10:0] INS_M_OUT;
input [10:0] IR_OUT;
input [3:0] OUTR_OUT;
input [4:0] PC_OUT;
input [3:0] R0_OUT;
input [3:0] R1_OUT;
input [3:0] R2_OUT;
input [4:0] stackm_out;
input  T0;
input  T2;
input  T3;
input  T4;
input  V_Cout;
input sampler_rx;

reg [3:0] AR_OUT_expected;
reg  Cout_expected;
reg [3:0] DATA_M_OUT_expected;
reg [10:0] INS_M_OUT_expected;
reg [10:0] IR_OUT_expected;
reg [3:0] OUTR_OUT_expected;
reg [4:0] PC_OUT_expected;
reg [3:0] R0_OUT_expected;
reg [3:0] R1_OUT_expected;
reg [3:0] R2_OUT_expected;
reg [4:0] stackm_out_expected;
reg  T0_expected;
reg  T2_expected;
reg  T3_expected;
reg  T4_expected;
reg  V_Cout_expected;

reg [3:0] AR_OUT_prev;
reg  Cout_prev;
reg [3:0] DATA_M_OUT_prev;
reg [10:0] INS_M_OUT_prev;
reg [10:0] IR_OUT_prev;
reg [3:0] OUTR_OUT_prev;
reg [4:0] PC_OUT_prev;
reg [3:0] R0_OUT_prev;
reg [3:0] R1_OUT_prev;
reg [3:0] R2_OUT_prev;
reg [4:0] stackm_out_prev;
reg  T0_prev;
reg  T2_prev;
reg  T3_prev;
reg  T4_prev;
reg  V_Cout_prev;

reg [3:0] AR_OUT_expected_prev;
reg  Cout_expected_prev;
reg [3:0] DATA_M_OUT_expected_prev;
reg [10:0] INS_M_OUT_expected_prev;
reg [10:0] IR_OUT_expected_prev;
reg [3:0] OUTR_OUT_expected_prev;
reg [4:0] PC_OUT_expected_prev;
reg [3:0] R0_OUT_expected_prev;
reg [3:0] R1_OUT_expected_prev;
reg [3:0] R2_OUT_expected_prev;
reg [4:0] stackm_out_expected_prev;
reg  T0_expected_prev;
reg  T2_expected_prev;
reg  T3_expected_prev;
reg  T4_expected_prev;
reg  V_Cout_expected_prev;

reg [3:0] last_AR_OUT_exp;
reg  last_Cout_exp;
reg [3:0] last_DATA_M_OUT_exp;
reg [10:0] last_INS_M_OUT_exp;
reg [10:0] last_IR_OUT_exp;
reg [3:0] last_OUTR_OUT_exp;
reg [4:0] last_PC_OUT_exp;
reg [3:0] last_R0_OUT_exp;
reg [3:0] last_R1_OUT_exp;
reg [3:0] last_R2_OUT_exp;
reg [4:0] last_stackm_out_exp;
reg  last_T0_exp;
reg  last_T2_exp;
reg  last_T3_exp;
reg  last_T4_exp;
reg  last_V_Cout_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:16] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 16'b1;
end

// update real /o prevs

always @(trigger)
begin
	AR_OUT_prev = AR_OUT;
	Cout_prev = Cout;
	DATA_M_OUT_prev = DATA_M_OUT;
	INS_M_OUT_prev = INS_M_OUT;
	IR_OUT_prev = IR_OUT;
	OUTR_OUT_prev = OUTR_OUT;
	PC_OUT_prev = PC_OUT;
	R0_OUT_prev = R0_OUT;
	R1_OUT_prev = R1_OUT;
	R2_OUT_prev = R2_OUT;
	stackm_out_prev = stackm_out;
	T0_prev = T0;
	T2_prev = T2;
	T3_prev = T3;
	T4_prev = T4;
	V_Cout_prev = V_Cout;
end

// update expected /o prevs

always @(trigger)
begin
	AR_OUT_expected_prev = AR_OUT_expected;
	Cout_expected_prev = Cout_expected;
	DATA_M_OUT_expected_prev = DATA_M_OUT_expected;
	INS_M_OUT_expected_prev = INS_M_OUT_expected;
	IR_OUT_expected_prev = IR_OUT_expected;
	OUTR_OUT_expected_prev = OUTR_OUT_expected;
	PC_OUT_expected_prev = PC_OUT_expected;
	R0_OUT_expected_prev = R0_OUT_expected;
	R1_OUT_expected_prev = R1_OUT_expected;
	R2_OUT_expected_prev = R2_OUT_expected;
	stackm_out_expected_prev = stackm_out_expected;
	T0_expected_prev = T0_expected;
	T2_expected_prev = T2_expected;
	T3_expected_prev = T3_expected;
	T4_expected_prev = T4_expected;
	V_Cout_expected_prev = V_Cout_expected;
end


// expected AR_OUT[ 3 ]
initial
begin
	AR_OUT_expected[3] = 1'bX;
end 
// expected AR_OUT[ 2 ]
initial
begin
	AR_OUT_expected[2] = 1'bX;
end 
// expected AR_OUT[ 1 ]
initial
begin
	AR_OUT_expected[1] = 1'bX;
end 
// expected AR_OUT[ 0 ]
initial
begin
	AR_OUT_expected[0] = 1'bX;
end 
// expected DATA_M_OUT[ 3 ]
initial
begin
	DATA_M_OUT_expected[3] = 1'bX;
end 
// expected DATA_M_OUT[ 2 ]
initial
begin
	DATA_M_OUT_expected[2] = 1'bX;
end 
// expected DATA_M_OUT[ 1 ]
initial
begin
	DATA_M_OUT_expected[1] = 1'bX;
end 
// expected DATA_M_OUT[ 0 ]
initial
begin
	DATA_M_OUT_expected[0] = 1'bX;
end 
// expected INS_M_OUT[ 10 ]
initial
begin
	INS_M_OUT_expected[10] = 1'bX;
end 
// expected INS_M_OUT[ 9 ]
initial
begin
	INS_M_OUT_expected[9] = 1'bX;
end 
// expected INS_M_OUT[ 8 ]
initial
begin
	INS_M_OUT_expected[8] = 1'bX;
end 
// expected INS_M_OUT[ 7 ]
initial
begin
	INS_M_OUT_expected[7] = 1'bX;
end 
// expected INS_M_OUT[ 6 ]
initial
begin
	INS_M_OUT_expected[6] = 1'bX;
end 
// expected INS_M_OUT[ 5 ]
initial
begin
	INS_M_OUT_expected[5] = 1'bX;
end 
// expected INS_M_OUT[ 4 ]
initial
begin
	INS_M_OUT_expected[4] = 1'bX;
end 
// expected INS_M_OUT[ 3 ]
initial
begin
	INS_M_OUT_expected[3] = 1'bX;
end 
// expected INS_M_OUT[ 2 ]
initial
begin
	INS_M_OUT_expected[2] = 1'bX;
end 
// expected INS_M_OUT[ 1 ]
initial
begin
	INS_M_OUT_expected[1] = 1'bX;
end 
// expected INS_M_OUT[ 0 ]
initial
begin
	INS_M_OUT_expected[0] = 1'bX;
end 
// expected IR_OUT[ 10 ]
initial
begin
	IR_OUT_expected[10] = 1'bX;
end 
// expected IR_OUT[ 9 ]
initial
begin
	IR_OUT_expected[9] = 1'bX;
end 
// expected IR_OUT[ 8 ]
initial
begin
	IR_OUT_expected[8] = 1'bX;
end 
// expected IR_OUT[ 7 ]
initial
begin
	IR_OUT_expected[7] = 1'bX;
end 
// expected IR_OUT[ 6 ]
initial
begin
	IR_OUT_expected[6] = 1'bX;
end 
// expected IR_OUT[ 5 ]
initial
begin
	IR_OUT_expected[5] = 1'bX;
end 
// expected IR_OUT[ 4 ]
initial
begin
	IR_OUT_expected[4] = 1'bX;
end 
// expected IR_OUT[ 3 ]
initial
begin
	IR_OUT_expected[3] = 1'bX;
end 
// expected IR_OUT[ 2 ]
initial
begin
	IR_OUT_expected[2] = 1'bX;
end 
// expected IR_OUT[ 1 ]
initial
begin
	IR_OUT_expected[1] = 1'bX;
end 
// expected IR_OUT[ 0 ]
initial
begin
	IR_OUT_expected[0] = 1'bX;
end 
// expected OUTR_OUT[ 3 ]
initial
begin
	OUTR_OUT_expected[3] = 1'bX;
end 
// expected OUTR_OUT[ 2 ]
initial
begin
	OUTR_OUT_expected[2] = 1'bX;
end 
// expected OUTR_OUT[ 1 ]
initial
begin
	OUTR_OUT_expected[1] = 1'bX;
end 
// expected OUTR_OUT[ 0 ]
initial
begin
	OUTR_OUT_expected[0] = 1'bX;
end 
// expected PC_OUT[ 4 ]
initial
begin
	PC_OUT_expected[4] = 1'bX;
end 
// expected PC_OUT[ 3 ]
initial
begin
	PC_OUT_expected[3] = 1'bX;
end 
// expected PC_OUT[ 2 ]
initial
begin
	PC_OUT_expected[2] = 1'bX;
end 
// expected PC_OUT[ 1 ]
initial
begin
	PC_OUT_expected[1] = 1'bX;
end 
// expected PC_OUT[ 0 ]
initial
begin
	PC_OUT_expected[0] = 1'bX;
end 
// expected R0_OUT[ 3 ]
initial
begin
	R0_OUT_expected[3] = 1'bX;
end 
// expected R0_OUT[ 2 ]
initial
begin
	R0_OUT_expected[2] = 1'bX;
end 
// expected R0_OUT[ 1 ]
initial
begin
	R0_OUT_expected[1] = 1'bX;
end 
// expected R0_OUT[ 0 ]
initial
begin
	R0_OUT_expected[0] = 1'bX;
end 
// expected R1_OUT[ 3 ]
initial
begin
	R1_OUT_expected[3] = 1'bX;
end 
// expected R1_OUT[ 2 ]
initial
begin
	R1_OUT_expected[2] = 1'bX;
end 
// expected R1_OUT[ 1 ]
initial
begin
	R1_OUT_expected[1] = 1'bX;
end 
// expected R1_OUT[ 0 ]
initial
begin
	R1_OUT_expected[0] = 1'bX;
end 
// expected R2_OUT[ 3 ]
initial
begin
	R2_OUT_expected[3] = 1'bX;
end 
// expected R2_OUT[ 2 ]
initial
begin
	R2_OUT_expected[2] = 1'bX;
end 
// expected R2_OUT[ 1 ]
initial
begin
	R2_OUT_expected[1] = 1'bX;
end 
// expected R2_OUT[ 0 ]
initial
begin
	R2_OUT_expected[0] = 1'bX;
end 
// expected stackm_out[ 4 ]
initial
begin
	stackm_out_expected[4] = 1'bX;
end 
// expected stackm_out[ 3 ]
initial
begin
	stackm_out_expected[3] = 1'bX;
end 
// expected stackm_out[ 2 ]
initial
begin
	stackm_out_expected[2] = 1'bX;
end 
// expected stackm_out[ 1 ]
initial
begin
	stackm_out_expected[1] = 1'bX;
end 
// expected stackm_out[ 0 ]
initial
begin
	stackm_out_expected[0] = 1'bX;
end 

// expected T0
initial
begin
	T0_expected = 1'bX;
end 

// expected T2
initial
begin
	T2_expected = 1'bX;
end 

// expected T3
initial
begin
	T3_expected = 1'bX;
end 

// expected T4
initial
begin
	T4_expected = 1'bX;
end 

// expected V_Cout
initial
begin
	V_Cout_expected = 1'bX;
end 

// expected Cout
initial
begin
	Cout_expected = 1'bX;
end 
// generate trigger
always @(AR_OUT_expected or AR_OUT or Cout_expected or Cout or DATA_M_OUT_expected or DATA_M_OUT or INS_M_OUT_expected or INS_M_OUT or IR_OUT_expected or IR_OUT or OUTR_OUT_expected or OUTR_OUT or PC_OUT_expected or PC_OUT or R0_OUT_expected or R0_OUT or R1_OUT_expected or R1_OUT or R2_OUT_expected or R2_OUT or stackm_out_expected or stackm_out or T0_expected or T0 or T2_expected or T2 or T3_expected or T3 or T4_expected or T4 or V_Cout_expected or V_Cout)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected AR_OUT = %b | expected Cout = %b | expected DATA_M_OUT = %b | expected INS_M_OUT = %b | expected IR_OUT = %b | expected OUTR_OUT = %b | expected PC_OUT = %b | expected R0_OUT = %b | expected R1_OUT = %b | expected R2_OUT = %b | expected stackm_out = %b | expected T0 = %b | expected T2 = %b | expected T3 = %b | expected T4 = %b | expected V_Cout = %b | ",AR_OUT_expected_prev,Cout_expected_prev,DATA_M_OUT_expected_prev,INS_M_OUT_expected_prev,IR_OUT_expected_prev,OUTR_OUT_expected_prev,PC_OUT_expected_prev,R0_OUT_expected_prev,R1_OUT_expected_prev,R2_OUT_expected_prev,stackm_out_expected_prev,T0_expected_prev,T2_expected_prev,T3_expected_prev,T4_expected_prev,V_Cout_expected_prev);
	$display("| real AR_OUT = %b | real Cout = %b | real DATA_M_OUT = %b | real INS_M_OUT = %b | real IR_OUT = %b | real OUTR_OUT = %b | real PC_OUT = %b | real R0_OUT = %b | real R1_OUT = %b | real R2_OUT = %b | real stackm_out = %b | real T0 = %b | real T2 = %b | real T3 = %b | real T4 = %b | real V_Cout = %b | ",AR_OUT_prev,Cout_prev,DATA_M_OUT_prev,INS_M_OUT_prev,IR_OUT_prev,OUTR_OUT_prev,PC_OUT_prev,R0_OUT_prev,R1_OUT_prev,R2_OUT_prev,stackm_out_prev,T0_prev,T2_prev,T3_prev,T4_prev,V_Cout_prev);
`endif
	if (
		( AR_OUT_expected_prev[0] !== 1'bx ) && ( AR_OUT_prev[0] !== AR_OUT_expected_prev[0] )
		&& ((AR_OUT_expected_prev[0] !== last_AR_OUT_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AR_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AR_OUT_expected_prev);
		$display ("     Real value = %b", AR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AR_OUT_exp[0] = AR_OUT_expected_prev[0];
	end
	if (
		( AR_OUT_expected_prev[1] !== 1'bx ) && ( AR_OUT_prev[1] !== AR_OUT_expected_prev[1] )
		&& ((AR_OUT_expected_prev[1] !== last_AR_OUT_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AR_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AR_OUT_expected_prev);
		$display ("     Real value = %b", AR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AR_OUT_exp[1] = AR_OUT_expected_prev[1];
	end
	if (
		( AR_OUT_expected_prev[2] !== 1'bx ) && ( AR_OUT_prev[2] !== AR_OUT_expected_prev[2] )
		&& ((AR_OUT_expected_prev[2] !== last_AR_OUT_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AR_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AR_OUT_expected_prev);
		$display ("     Real value = %b", AR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AR_OUT_exp[2] = AR_OUT_expected_prev[2];
	end
	if (
		( AR_OUT_expected_prev[3] !== 1'bx ) && ( AR_OUT_prev[3] !== AR_OUT_expected_prev[3] )
		&& ((AR_OUT_expected_prev[3] !== last_AR_OUT_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AR_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AR_OUT_expected_prev);
		$display ("     Real value = %b", AR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AR_OUT_exp[3] = AR_OUT_expected_prev[3];
	end
	if (
		( Cout_expected_prev !== 1'bx ) && ( Cout_prev !== Cout_expected_prev )
		&& ((Cout_expected_prev !== last_Cout_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cout_expected_prev);
		$display ("     Real value = %b", Cout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cout_exp = Cout_expected_prev;
	end
	if (
		( DATA_M_OUT_expected_prev[0] !== 1'bx ) && ( DATA_M_OUT_prev[0] !== DATA_M_OUT_expected_prev[0] )
		&& ((DATA_M_OUT_expected_prev[0] !== last_DATA_M_OUT_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_M_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_M_OUT_expected_prev);
		$display ("     Real value = %b", DATA_M_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATA_M_OUT_exp[0] = DATA_M_OUT_expected_prev[0];
	end
	if (
		( DATA_M_OUT_expected_prev[1] !== 1'bx ) && ( DATA_M_OUT_prev[1] !== DATA_M_OUT_expected_prev[1] )
		&& ((DATA_M_OUT_expected_prev[1] !== last_DATA_M_OUT_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_M_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_M_OUT_expected_prev);
		$display ("     Real value = %b", DATA_M_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATA_M_OUT_exp[1] = DATA_M_OUT_expected_prev[1];
	end
	if (
		( DATA_M_OUT_expected_prev[2] !== 1'bx ) && ( DATA_M_OUT_prev[2] !== DATA_M_OUT_expected_prev[2] )
		&& ((DATA_M_OUT_expected_prev[2] !== last_DATA_M_OUT_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_M_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_M_OUT_expected_prev);
		$display ("     Real value = %b", DATA_M_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATA_M_OUT_exp[2] = DATA_M_OUT_expected_prev[2];
	end
	if (
		( DATA_M_OUT_expected_prev[3] !== 1'bx ) && ( DATA_M_OUT_prev[3] !== DATA_M_OUT_expected_prev[3] )
		&& ((DATA_M_OUT_expected_prev[3] !== last_DATA_M_OUT_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_M_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_M_OUT_expected_prev);
		$display ("     Real value = %b", DATA_M_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATA_M_OUT_exp[3] = DATA_M_OUT_expected_prev[3];
	end
	if (
		( INS_M_OUT_expected_prev[0] !== 1'bx ) && ( INS_M_OUT_prev[0] !== INS_M_OUT_expected_prev[0] )
		&& ((INS_M_OUT_expected_prev[0] !== last_INS_M_OUT_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS_M_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_M_OUT_expected_prev);
		$display ("     Real value = %b", INS_M_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INS_M_OUT_exp[0] = INS_M_OUT_expected_prev[0];
	end
	if (
		( INS_M_OUT_expected_prev[1] !== 1'bx ) && ( INS_M_OUT_prev[1] !== INS_M_OUT_expected_prev[1] )
		&& ((INS_M_OUT_expected_prev[1] !== last_INS_M_OUT_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS_M_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_M_OUT_expected_prev);
		$display ("     Real value = %b", INS_M_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INS_M_OUT_exp[1] = INS_M_OUT_expected_prev[1];
	end
	if (
		( INS_M_OUT_expected_prev[2] !== 1'bx ) && ( INS_M_OUT_prev[2] !== INS_M_OUT_expected_prev[2] )
		&& ((INS_M_OUT_expected_prev[2] !== last_INS_M_OUT_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS_M_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_M_OUT_expected_prev);
		$display ("     Real value = %b", INS_M_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INS_M_OUT_exp[2] = INS_M_OUT_expected_prev[2];
	end
	if (
		( INS_M_OUT_expected_prev[3] !== 1'bx ) && ( INS_M_OUT_prev[3] !== INS_M_OUT_expected_prev[3] )
		&& ((INS_M_OUT_expected_prev[3] !== last_INS_M_OUT_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS_M_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_M_OUT_expected_prev);
		$display ("     Real value = %b", INS_M_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INS_M_OUT_exp[3] = INS_M_OUT_expected_prev[3];
	end
	if (
		( INS_M_OUT_expected_prev[4] !== 1'bx ) && ( INS_M_OUT_prev[4] !== INS_M_OUT_expected_prev[4] )
		&& ((INS_M_OUT_expected_prev[4] !== last_INS_M_OUT_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS_M_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_M_OUT_expected_prev);
		$display ("     Real value = %b", INS_M_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INS_M_OUT_exp[4] = INS_M_OUT_expected_prev[4];
	end
	if (
		( INS_M_OUT_expected_prev[5] !== 1'bx ) && ( INS_M_OUT_prev[5] !== INS_M_OUT_expected_prev[5] )
		&& ((INS_M_OUT_expected_prev[5] !== last_INS_M_OUT_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS_M_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_M_OUT_expected_prev);
		$display ("     Real value = %b", INS_M_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INS_M_OUT_exp[5] = INS_M_OUT_expected_prev[5];
	end
	if (
		( INS_M_OUT_expected_prev[6] !== 1'bx ) && ( INS_M_OUT_prev[6] !== INS_M_OUT_expected_prev[6] )
		&& ((INS_M_OUT_expected_prev[6] !== last_INS_M_OUT_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS_M_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_M_OUT_expected_prev);
		$display ("     Real value = %b", INS_M_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INS_M_OUT_exp[6] = INS_M_OUT_expected_prev[6];
	end
	if (
		( INS_M_OUT_expected_prev[7] !== 1'bx ) && ( INS_M_OUT_prev[7] !== INS_M_OUT_expected_prev[7] )
		&& ((INS_M_OUT_expected_prev[7] !== last_INS_M_OUT_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS_M_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_M_OUT_expected_prev);
		$display ("     Real value = %b", INS_M_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INS_M_OUT_exp[7] = INS_M_OUT_expected_prev[7];
	end
	if (
		( INS_M_OUT_expected_prev[8] !== 1'bx ) && ( INS_M_OUT_prev[8] !== INS_M_OUT_expected_prev[8] )
		&& ((INS_M_OUT_expected_prev[8] !== last_INS_M_OUT_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS_M_OUT[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_M_OUT_expected_prev);
		$display ("     Real value = %b", INS_M_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INS_M_OUT_exp[8] = INS_M_OUT_expected_prev[8];
	end
	if (
		( INS_M_OUT_expected_prev[9] !== 1'bx ) && ( INS_M_OUT_prev[9] !== INS_M_OUT_expected_prev[9] )
		&& ((INS_M_OUT_expected_prev[9] !== last_INS_M_OUT_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS_M_OUT[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_M_OUT_expected_prev);
		$display ("     Real value = %b", INS_M_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INS_M_OUT_exp[9] = INS_M_OUT_expected_prev[9];
	end
	if (
		( INS_M_OUT_expected_prev[10] !== 1'bx ) && ( INS_M_OUT_prev[10] !== INS_M_OUT_expected_prev[10] )
		&& ((INS_M_OUT_expected_prev[10] !== last_INS_M_OUT_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS_M_OUT[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_M_OUT_expected_prev);
		$display ("     Real value = %b", INS_M_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INS_M_OUT_exp[10] = INS_M_OUT_expected_prev[10];
	end
	if (
		( IR_OUT_expected_prev[0] !== 1'bx ) && ( IR_OUT_prev[0] !== IR_OUT_expected_prev[0] )
		&& ((IR_OUT_expected_prev[0] !== last_IR_OUT_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_OUT_expected_prev);
		$display ("     Real value = %b", IR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_IR_OUT_exp[0] = IR_OUT_expected_prev[0];
	end
	if (
		( IR_OUT_expected_prev[1] !== 1'bx ) && ( IR_OUT_prev[1] !== IR_OUT_expected_prev[1] )
		&& ((IR_OUT_expected_prev[1] !== last_IR_OUT_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_OUT_expected_prev);
		$display ("     Real value = %b", IR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_IR_OUT_exp[1] = IR_OUT_expected_prev[1];
	end
	if (
		( IR_OUT_expected_prev[2] !== 1'bx ) && ( IR_OUT_prev[2] !== IR_OUT_expected_prev[2] )
		&& ((IR_OUT_expected_prev[2] !== last_IR_OUT_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_OUT_expected_prev);
		$display ("     Real value = %b", IR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_IR_OUT_exp[2] = IR_OUT_expected_prev[2];
	end
	if (
		( IR_OUT_expected_prev[3] !== 1'bx ) && ( IR_OUT_prev[3] !== IR_OUT_expected_prev[3] )
		&& ((IR_OUT_expected_prev[3] !== last_IR_OUT_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_OUT_expected_prev);
		$display ("     Real value = %b", IR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_IR_OUT_exp[3] = IR_OUT_expected_prev[3];
	end
	if (
		( IR_OUT_expected_prev[4] !== 1'bx ) && ( IR_OUT_prev[4] !== IR_OUT_expected_prev[4] )
		&& ((IR_OUT_expected_prev[4] !== last_IR_OUT_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_OUT_expected_prev);
		$display ("     Real value = %b", IR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_IR_OUT_exp[4] = IR_OUT_expected_prev[4];
	end
	if (
		( IR_OUT_expected_prev[5] !== 1'bx ) && ( IR_OUT_prev[5] !== IR_OUT_expected_prev[5] )
		&& ((IR_OUT_expected_prev[5] !== last_IR_OUT_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_OUT_expected_prev);
		$display ("     Real value = %b", IR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_IR_OUT_exp[5] = IR_OUT_expected_prev[5];
	end
	if (
		( IR_OUT_expected_prev[6] !== 1'bx ) && ( IR_OUT_prev[6] !== IR_OUT_expected_prev[6] )
		&& ((IR_OUT_expected_prev[6] !== last_IR_OUT_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_OUT_expected_prev);
		$display ("     Real value = %b", IR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_IR_OUT_exp[6] = IR_OUT_expected_prev[6];
	end
	if (
		( IR_OUT_expected_prev[7] !== 1'bx ) && ( IR_OUT_prev[7] !== IR_OUT_expected_prev[7] )
		&& ((IR_OUT_expected_prev[7] !== last_IR_OUT_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_OUT_expected_prev);
		$display ("     Real value = %b", IR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_IR_OUT_exp[7] = IR_OUT_expected_prev[7];
	end
	if (
		( IR_OUT_expected_prev[8] !== 1'bx ) && ( IR_OUT_prev[8] !== IR_OUT_expected_prev[8] )
		&& ((IR_OUT_expected_prev[8] !== last_IR_OUT_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_OUT[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_OUT_expected_prev);
		$display ("     Real value = %b", IR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_IR_OUT_exp[8] = IR_OUT_expected_prev[8];
	end
	if (
		( IR_OUT_expected_prev[9] !== 1'bx ) && ( IR_OUT_prev[9] !== IR_OUT_expected_prev[9] )
		&& ((IR_OUT_expected_prev[9] !== last_IR_OUT_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_OUT[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_OUT_expected_prev);
		$display ("     Real value = %b", IR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_IR_OUT_exp[9] = IR_OUT_expected_prev[9];
	end
	if (
		( IR_OUT_expected_prev[10] !== 1'bx ) && ( IR_OUT_prev[10] !== IR_OUT_expected_prev[10] )
		&& ((IR_OUT_expected_prev[10] !== last_IR_OUT_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_OUT[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_OUT_expected_prev);
		$display ("     Real value = %b", IR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_IR_OUT_exp[10] = IR_OUT_expected_prev[10];
	end
	if (
		( OUTR_OUT_expected_prev[0] !== 1'bx ) && ( OUTR_OUT_prev[0] !== OUTR_OUT_expected_prev[0] )
		&& ((OUTR_OUT_expected_prev[0] !== last_OUTR_OUT_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTR_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTR_OUT_expected_prev);
		$display ("     Real value = %b", OUTR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_OUTR_OUT_exp[0] = OUTR_OUT_expected_prev[0];
	end
	if (
		( OUTR_OUT_expected_prev[1] !== 1'bx ) && ( OUTR_OUT_prev[1] !== OUTR_OUT_expected_prev[1] )
		&& ((OUTR_OUT_expected_prev[1] !== last_OUTR_OUT_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTR_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTR_OUT_expected_prev);
		$display ("     Real value = %b", OUTR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_OUTR_OUT_exp[1] = OUTR_OUT_expected_prev[1];
	end
	if (
		( OUTR_OUT_expected_prev[2] !== 1'bx ) && ( OUTR_OUT_prev[2] !== OUTR_OUT_expected_prev[2] )
		&& ((OUTR_OUT_expected_prev[2] !== last_OUTR_OUT_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTR_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTR_OUT_expected_prev);
		$display ("     Real value = %b", OUTR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_OUTR_OUT_exp[2] = OUTR_OUT_expected_prev[2];
	end
	if (
		( OUTR_OUT_expected_prev[3] !== 1'bx ) && ( OUTR_OUT_prev[3] !== OUTR_OUT_expected_prev[3] )
		&& ((OUTR_OUT_expected_prev[3] !== last_OUTR_OUT_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTR_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTR_OUT_expected_prev);
		$display ("     Real value = %b", OUTR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_OUTR_OUT_exp[3] = OUTR_OUT_expected_prev[3];
	end
	if (
		( PC_OUT_expected_prev[0] !== 1'bx ) && ( PC_OUT_prev[0] !== PC_OUT_expected_prev[0] )
		&& ((PC_OUT_expected_prev[0] !== last_PC_OUT_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_OUT_expected_prev);
		$display ("     Real value = %b", PC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_PC_OUT_exp[0] = PC_OUT_expected_prev[0];
	end
	if (
		( PC_OUT_expected_prev[1] !== 1'bx ) && ( PC_OUT_prev[1] !== PC_OUT_expected_prev[1] )
		&& ((PC_OUT_expected_prev[1] !== last_PC_OUT_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_OUT_expected_prev);
		$display ("     Real value = %b", PC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_PC_OUT_exp[1] = PC_OUT_expected_prev[1];
	end
	if (
		( PC_OUT_expected_prev[2] !== 1'bx ) && ( PC_OUT_prev[2] !== PC_OUT_expected_prev[2] )
		&& ((PC_OUT_expected_prev[2] !== last_PC_OUT_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_OUT_expected_prev);
		$display ("     Real value = %b", PC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_PC_OUT_exp[2] = PC_OUT_expected_prev[2];
	end
	if (
		( PC_OUT_expected_prev[3] !== 1'bx ) && ( PC_OUT_prev[3] !== PC_OUT_expected_prev[3] )
		&& ((PC_OUT_expected_prev[3] !== last_PC_OUT_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_OUT_expected_prev);
		$display ("     Real value = %b", PC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_PC_OUT_exp[3] = PC_OUT_expected_prev[3];
	end
	if (
		( PC_OUT_expected_prev[4] !== 1'bx ) && ( PC_OUT_prev[4] !== PC_OUT_expected_prev[4] )
		&& ((PC_OUT_expected_prev[4] !== last_PC_OUT_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_OUT_expected_prev);
		$display ("     Real value = %b", PC_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_PC_OUT_exp[4] = PC_OUT_expected_prev[4];
	end
	if (
		( R0_OUT_expected_prev[0] !== 1'bx ) && ( R0_OUT_prev[0] !== R0_OUT_expected_prev[0] )
		&& ((R0_OUT_expected_prev[0] !== last_R0_OUT_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_OUT_expected_prev);
		$display ("     Real value = %b", R0_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R0_OUT_exp[0] = R0_OUT_expected_prev[0];
	end
	if (
		( R0_OUT_expected_prev[1] !== 1'bx ) && ( R0_OUT_prev[1] !== R0_OUT_expected_prev[1] )
		&& ((R0_OUT_expected_prev[1] !== last_R0_OUT_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_OUT_expected_prev);
		$display ("     Real value = %b", R0_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R0_OUT_exp[1] = R0_OUT_expected_prev[1];
	end
	if (
		( R0_OUT_expected_prev[2] !== 1'bx ) && ( R0_OUT_prev[2] !== R0_OUT_expected_prev[2] )
		&& ((R0_OUT_expected_prev[2] !== last_R0_OUT_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_OUT_expected_prev);
		$display ("     Real value = %b", R0_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R0_OUT_exp[2] = R0_OUT_expected_prev[2];
	end
	if (
		( R0_OUT_expected_prev[3] !== 1'bx ) && ( R0_OUT_prev[3] !== R0_OUT_expected_prev[3] )
		&& ((R0_OUT_expected_prev[3] !== last_R0_OUT_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_OUT_expected_prev);
		$display ("     Real value = %b", R0_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R0_OUT_exp[3] = R0_OUT_expected_prev[3];
	end
	if (
		( R1_OUT_expected_prev[0] !== 1'bx ) && ( R1_OUT_prev[0] !== R1_OUT_expected_prev[0] )
		&& ((R1_OUT_expected_prev[0] !== last_R1_OUT_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_OUT_expected_prev);
		$display ("     Real value = %b", R1_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_R1_OUT_exp[0] = R1_OUT_expected_prev[0];
	end
	if (
		( R1_OUT_expected_prev[1] !== 1'bx ) && ( R1_OUT_prev[1] !== R1_OUT_expected_prev[1] )
		&& ((R1_OUT_expected_prev[1] !== last_R1_OUT_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_OUT_expected_prev);
		$display ("     Real value = %b", R1_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_R1_OUT_exp[1] = R1_OUT_expected_prev[1];
	end
	if (
		( R1_OUT_expected_prev[2] !== 1'bx ) && ( R1_OUT_prev[2] !== R1_OUT_expected_prev[2] )
		&& ((R1_OUT_expected_prev[2] !== last_R1_OUT_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_OUT_expected_prev);
		$display ("     Real value = %b", R1_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_R1_OUT_exp[2] = R1_OUT_expected_prev[2];
	end
	if (
		( R1_OUT_expected_prev[3] !== 1'bx ) && ( R1_OUT_prev[3] !== R1_OUT_expected_prev[3] )
		&& ((R1_OUT_expected_prev[3] !== last_R1_OUT_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_OUT_expected_prev);
		$display ("     Real value = %b", R1_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_R1_OUT_exp[3] = R1_OUT_expected_prev[3];
	end
	if (
		( R2_OUT_expected_prev[0] !== 1'bx ) && ( R2_OUT_prev[0] !== R2_OUT_expected_prev[0] )
		&& ((R2_OUT_expected_prev[0] !== last_R2_OUT_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_OUT_expected_prev);
		$display ("     Real value = %b", R2_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_R2_OUT_exp[0] = R2_OUT_expected_prev[0];
	end
	if (
		( R2_OUT_expected_prev[1] !== 1'bx ) && ( R2_OUT_prev[1] !== R2_OUT_expected_prev[1] )
		&& ((R2_OUT_expected_prev[1] !== last_R2_OUT_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_OUT_expected_prev);
		$display ("     Real value = %b", R2_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_R2_OUT_exp[1] = R2_OUT_expected_prev[1];
	end
	if (
		( R2_OUT_expected_prev[2] !== 1'bx ) && ( R2_OUT_prev[2] !== R2_OUT_expected_prev[2] )
		&& ((R2_OUT_expected_prev[2] !== last_R2_OUT_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_OUT_expected_prev);
		$display ("     Real value = %b", R2_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_R2_OUT_exp[2] = R2_OUT_expected_prev[2];
	end
	if (
		( R2_OUT_expected_prev[3] !== 1'bx ) && ( R2_OUT_prev[3] !== R2_OUT_expected_prev[3] )
		&& ((R2_OUT_expected_prev[3] !== last_R2_OUT_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_OUT_expected_prev);
		$display ("     Real value = %b", R2_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_R2_OUT_exp[3] = R2_OUT_expected_prev[3];
	end
	if (
		( stackm_out_expected_prev[0] !== 1'bx ) && ( stackm_out_prev[0] !== stackm_out_expected_prev[0] )
		&& ((stackm_out_expected_prev[0] !== last_stackm_out_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stackm_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stackm_out_expected_prev);
		$display ("     Real value = %b", stackm_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_stackm_out_exp[0] = stackm_out_expected_prev[0];
	end
	if (
		( stackm_out_expected_prev[1] !== 1'bx ) && ( stackm_out_prev[1] !== stackm_out_expected_prev[1] )
		&& ((stackm_out_expected_prev[1] !== last_stackm_out_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stackm_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stackm_out_expected_prev);
		$display ("     Real value = %b", stackm_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_stackm_out_exp[1] = stackm_out_expected_prev[1];
	end
	if (
		( stackm_out_expected_prev[2] !== 1'bx ) && ( stackm_out_prev[2] !== stackm_out_expected_prev[2] )
		&& ((stackm_out_expected_prev[2] !== last_stackm_out_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stackm_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stackm_out_expected_prev);
		$display ("     Real value = %b", stackm_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_stackm_out_exp[2] = stackm_out_expected_prev[2];
	end
	if (
		( stackm_out_expected_prev[3] !== 1'bx ) && ( stackm_out_prev[3] !== stackm_out_expected_prev[3] )
		&& ((stackm_out_expected_prev[3] !== last_stackm_out_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stackm_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stackm_out_expected_prev);
		$display ("     Real value = %b", stackm_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_stackm_out_exp[3] = stackm_out_expected_prev[3];
	end
	if (
		( stackm_out_expected_prev[4] !== 1'bx ) && ( stackm_out_prev[4] !== stackm_out_expected_prev[4] )
		&& ((stackm_out_expected_prev[4] !== last_stackm_out_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stackm_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stackm_out_expected_prev);
		$display ("     Real value = %b", stackm_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_stackm_out_exp[4] = stackm_out_expected_prev[4];
	end
	if (
		( T0_expected_prev !== 1'bx ) && ( T0_prev !== T0_expected_prev )
		&& ((T0_expected_prev !== last_T0_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T0_expected_prev);
		$display ("     Real value = %b", T0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_T0_exp = T0_expected_prev;
	end
	if (
		( T2_expected_prev !== 1'bx ) && ( T2_prev !== T2_expected_prev )
		&& ((T2_expected_prev !== last_T2_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T2_expected_prev);
		$display ("     Real value = %b", T2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_T2_exp = T2_expected_prev;
	end
	if (
		( T3_expected_prev !== 1'bx ) && ( T3_prev !== T3_expected_prev )
		&& ((T3_expected_prev !== last_T3_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T3_expected_prev);
		$display ("     Real value = %b", T3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_T3_exp = T3_expected_prev;
	end
	if (
		( T4_expected_prev !== 1'bx ) && ( T4_prev !== T4_expected_prev )
		&& ((T4_expected_prev !== last_T4_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T4_expected_prev);
		$display ("     Real value = %b", T4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_T4_exp = T4_expected_prev;
	end
	if (
		( V_Cout_expected_prev !== 1'bx ) && ( V_Cout_prev !== V_Cout_expected_prev )
		&& ((V_Cout_expected_prev !== last_V_Cout_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port V_Cout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", V_Cout_expected_prev);
		$display ("     Real value = %b", V_Cout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_V_Cout_exp = V_Cout_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module 2022510125_Gokhan_Guven_BUS_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [1:0] clr_reg;
reg [3:0] input;
reg mclk;
reg rclk;
// wires                                               
wire [3:0] AR_OUT;
wire Cout;
wire [3:0] DATA_M_OUT;
wire [10:0] INS_M_OUT;
wire [10:0] IR_OUT;
wire [3:0] OUTR_OUT;
wire [4:0] PC_OUT;
wire [3:0] R0_OUT;
wire [3:0] R1_OUT;
wire [3:0] R2_OUT;
wire [4:0] stackm_out;
wire T0;
wire T2;
wire T3;
wire T4;
wire V_Cout;

wire sampler;                             

// assign statements (if any)                          
2022510125_Gokhan_Guven_BUS i1 (
// port map - connection between master ports and signals/registers   
	.AR_OUT(AR_OUT),
	.clr_reg(clr_reg),
	.Cout(Cout),
	.DATA_M_OUT(DATA_M_OUT),
	.\input (input),
	.INS_M_OUT(INS_M_OUT),
	.IR_OUT(IR_OUT),
	.mclk(mclk),
	.OUTR_OUT(OUTR_OUT),
	.PC_OUT(PC_OUT),
	.R0_OUT(R0_OUT),
	.R1_OUT(R1_OUT),
	.R2_OUT(R2_OUT),
	.rclk(rclk),
	.stackm_out(stackm_out),
	.T0(T0),
	.T2(T2),
	.T3(T3),
	.T4(T4),
	.V_Cout(V_Cout)
);

// mclk
always
begin
	mclk = 1'b0;
	mclk = #1000 1'b1;
	#1000;
end 

// rclk
always
begin
	rclk = 1'b0;
	rclk = #4000 1'b1;
	#4000;
end 
// clr_reg[ 1 ]
initial
begin
	clr_reg[1] = 1'b0;
end 
// clr_reg[ 0 ]
initial
begin
	clr_reg[0] = 1'b0;
end 
// \input [ 3 ]
initial
begin
	input[3] = 1'b0;
end 
// \input [ 2 ]
initial
begin
	input[2] = 1'b0;
end 
// \input [ 1 ]
initial
begin
	input[1] = 1'b0;
end 
// \input [ 0 ]
initial
begin
	input[0] = 1'b0;
end 

2022510125_Gokhan_Guven_BUS_vlg_sample_tst tb_sample (
	.clr_reg(clr_reg),
	.input(input),
	.mclk(mclk),
	.rclk(rclk),
	.sampler_tx(sampler)
);

2022510125_Gokhan_Guven_BUS_vlg_check_tst tb_out(
	.AR_OUT(AR_OUT),
	.Cout(Cout),
	.DATA_M_OUT(DATA_M_OUT),
	.INS_M_OUT(INS_M_OUT),
	.IR_OUT(IR_OUT),
	.OUTR_OUT(OUTR_OUT),
	.PC_OUT(PC_OUT),
	.R0_OUT(R0_OUT),
	.R1_OUT(R1_OUT),
	.R2_OUT(R2_OUT),
	.stackm_out(stackm_out),
	.T0(T0),
	.T2(T2),
	.T3(T3),
	.T4(T4),
	.V_Cout(V_Cout),
	.sampler_rx(sampler)
);
endmodule

